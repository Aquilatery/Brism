@page "/javascript"

@rendermode InteractiveServer

@using Brism
@using Brism = Brism.CodeBlock

<PageTitle>JavaScript Examples - Brism Demo</PageTitle>

<h1>JavaScript Code Examples</h1>

<div class="mb-4">
    <h3>Modern ES6+ Features</h3>
    <CodeBlock Code=@(@"
// Arrow functions and template literals
const greet = (name) => `Hello, ${name}!`;

// Destructuring and spread operator
const person = { name: 'John', age: 30, city: 'New York' };
const { name, ...rest } = person;
const newPerson = { ...person, country: 'USA' };

// Array methods
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(n => n * 2);
const sum = numbers.reduce((acc, curr) => acc + curr, 0);")
               Language="CodeLanguage.JavaScript"
    EnableLineNumbers="true" />
</div>

<div class="mb-4">
    <h3>Async/Await Example</h3>
    <CodeBlock Code=@(@"
async function fetchUserData() {
    try {
        const response = await fetch('https://api.example.com/user');
        const data = await response.json();
        
        return data;
    } catch (error) {
        console.error('Error fetching user:', error);
        throw error;
    }
}")
    Language="CodeLanguage.JavaScript"
    EnableLineNumbers="true" />
</div>

<div class="mb-4">
    <h3>DOM Manipulation</h3>
    <CodeBlock Code=@(@"
// Modern DOM manipulation
document.querySelector('.button').addEventListener('click', () => {
    const element = document.createElement('div');
    element.classList.add('new-element');
    element.textContent = 'Dynamically created!';
    
    document.body.appendChild(element);
});

// Using modern APIs
const observer = new IntersectionObserver(
    (entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    },
    { threshold: 0.5 }
);")
    Language="CodeLanguage.JavaScript"
    EnableLineNumbers="true" />
</div>
